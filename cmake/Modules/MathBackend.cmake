# SPDX-License-Identifier: LGPL-3.0-only

include_guard(GLOBAL)

option(HP_NUMERIC_USE_MKL "Use Intel MKL as BLAS backend" OFF)
option(HP_NUMERIC_USE_AOCL "Use AMD AOCL as BLAS backend" OFF)
option(HP_NUMERIC_USE_OPENBLAS "Use OpenBLAS as BLAS backend" OFF)

if (NOT HP_NUMERIC_USE_MKL AND NOT HP_NUMERIC_USE_AOCL AND NOT HP_NUMERIC_USE_OPENBLAS)
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
        set(_hp_numeric_cpu_vendor "")
        if (EXISTS "/proc/cpuinfo")
            file(STRINGS "/proc/cpuinfo" _hp_numeric_cpu_vendor_lines REGEX "^vendor_id")
            list(LENGTH _hp_numeric_cpu_vendor_lines _hp_numeric_cpu_vendor_count)
            if (_hp_numeric_cpu_vendor_count GREATER 0)
                list(GET _hp_numeric_cpu_vendor_lines 0 _hp_numeric_cpu_vendor_line)
                if (_hp_numeric_cpu_vendor_line MATCHES "AuthenticAMD")
                    set(_hp_numeric_cpu_vendor "amd")
                elseif (_hp_numeric_cpu_vendor_line MATCHES "GenuineIntel")
                    set(_hp_numeric_cpu_vendor "intel")
                endif ()
            endif ()
        endif ()

        if (_hp_numeric_cpu_vendor STREQUAL "amd")
            set(HP_NUMERIC_USE_AOCL ON)
        else ()
            set(HP_NUMERIC_USE_MKL ON)
        endif ()
    elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "arm64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
        set(HP_NUMERIC_USE_OPENBLAS ON)
    else ()
        set(HP_NUMERIC_USE_OPENBLAS ON)
    endif ()
endif ()

set(_hp_numeric_backend_count 0)
if (HP_NUMERIC_USE_MKL)
    math(EXPR _hp_numeric_backend_count "${_hp_numeric_backend_count} + 1")
endif ()
if (HP_NUMERIC_USE_AOCL)
    math(EXPR _hp_numeric_backend_count "${_hp_numeric_backend_count} + 1")
endif ()
if (HP_NUMERIC_USE_OPENBLAS)
    math(EXPR _hp_numeric_backend_count "${_hp_numeric_backend_count} + 1")
endif ()

if (_hp_numeric_backend_count EQUAL 0)
    message(FATAL_ERROR "No BLAS backend selected. Enable one of HP_NUMERIC_USE_MKL, HP_NUMERIC_USE_AOCL, HP_NUMERIC_USE_OPENBLAS.")
elseif (_hp_numeric_backend_count GREATER 1)
    message(FATAL_ERROR "Multiple BLAS backends selected. Enable only one of HP_NUMERIC_USE_MKL, HP_NUMERIC_USE_AOCL, HP_NUMERIC_USE_OPENBLAS.")
endif ()

set(BLA_VENDOR "" CACHE STRING "Preferred BLAS vendor for HP numeric backend" FORCE)
set(BLAS_INCLUDE_DIRS "" CACHE STRING "Include paths for the selected BLAS backend" FORCE)

if (HP_NUMERIC_USE_MKL)
    if (NOT DEFINED ENV{MKLROOT} OR "$ENV{MKLROOT}" STREQUAL "")
        message(FATAL_ERROR "HP_NUMERIC_USE_MKL is ON but MKLROOT is not defined. Source the MKL environment or export MKLROOT before configuring.")
    endif ()

    add_definitions(-DHP_NUMERIC_BACKEND_MKL)
    set(BLA_VENDOR Intel10_64lp CACHE STRING "" FORCE)
    set(BLAS_INCLUDE_DIRS "$ENV{MKLROOT}/include" CACHE STRING "" FORCE)
elseif (HP_NUMERIC_USE_AOCL)
    if (NOT DEFINED ENV{AOCL_ROOT} OR "$ENV{AOCL_ROOT}" STREQUAL "")
        message(FATAL_ERROR "HP_NUMERIC_USE_AOCL is ON but AOCL_ROOT is not defined. Source ~/myenv.sh or export AOCL_ROOT before configuring.")
    endif ()

    add_definitions(-DHP_NUMERIC_BACKEND_AOCL)
    set(BLA_VENDOR AOCL CACHE STRING "" FORCE)
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} $ENV{AOCL_ROOT})
    set(BLAS_INCLUDE_DIRS "$ENV{AOCL_ROOT}/include" CACHE STRING "" FORCE)
elseif (HP_NUMERIC_USE_OPENBLAS)
    add_definitions(-DUSE_OPENBLAS -DHP_NUMERIC_BACKEND_OPENBLAS)
    set(BLA_VENDOR OpenBLAS CACHE STRING "" FORCE)
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "arm64" OR CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
        set(OpenBLAS_ROOT "/opt/homebrew/opt/openblas/")
        set(LAPACK_ROOT "/opt/homebrew/opt/lapack")
        set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${OpenBLAS_ROOT} ${LAPACK_ROOT})
        set(BLAS_INCLUDE_DIRS "${OpenBLAS_ROOT}/include" CACHE STRING "" FORCE)
    endif ()
endif ()

if (BLAS_INCLUDE_DIRS)
    message(STATUS "HP numeric headers: ${BLAS_INCLUDE_DIRS}")
endif ()

